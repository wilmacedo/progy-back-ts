generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  User       User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model Institution {
  id         Int        @id @default(autoincrement())
  name       String
  code       String
  User       User[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Planning   Planning[]

  @@map("institutions")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  password          String
  email             String              @unique
  role              Role?               @relation(fields: [role_id], references: [id], onDelete: Cascade)
  institution       Institution?        @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  role_id           Int
  institution_id    Int
  Initiative        Initiative[]
  Activity          Activity[]
  PendingActivity   PendingActivity[]
  PendingInitiative PendingInitiative[]

  @@map("users")
}

model Planning {
  id                Int                 @id @default(autoincrement())
  name              String
  sector            String
  institution       Institution?        @relation(fields: [institution_id], references: [id], onDelete: Cascade)
  institution_id    Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Perspective       Perspective[]
  Goals             Goal[]
  Stage             Stage[]
  Unit              Unit[]
  Font              Font[]
  State             State[]
  Activity          Activity[]
  PendingActivity   PendingActivity[]
  PendingInitiative PendingInitiative[]
  Mapp              Mapp[]

  @@map("plannings")
}

model Perspective {
  id                Int                 @id @default(autoincrement())
  name              String
  planning          Planning?           @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id       Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Initiative        Initiative[]
  PendingInitiative PendingInitiative[]

  @@map("perspectives")
}

model Goal {
  id                Int                 @id @default(autoincrement())
  name              String
  planning          Planning?           @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id       Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Initiative        Initiative[]
  PendingInitiative PendingInitiative[]

  @@map("goals")
}

model Stage {
  id                Int                 @id @default(autoincrement())
  name              String
  planning          Planning?           @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id       Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Initiative        Initiative[]
  PendingInitiative PendingInitiative[]

  @@map("stages")
}

model Unit {
  id                Int                 @id @default(autoincrement())
  name              String
  code              String
  planning          Planning?           @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id       Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Initiative        Initiative[]
  PendingInitiative PendingInitiative[]

  @@map("units")
}

model Font {
  id                Int                 @id @default(autoincrement())
  name              String
  code              String
  date              DateTime
  value             Int
  other_value       Int
  planning          Planning?           @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id       Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Initiative        Initiative[]
  PendingInitiative PendingInitiative[]

  @@map("fonts")
}

model State {
  id              Int               @id @default(autoincrement())
  name            String
  planning        Planning?         @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id     Int
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Activity        Activity[]
  PendingActivity PendingActivity[]

  @@map("states")
}

model Initiative {
  id                Int                 @id @default(autoincrement())
  name              String
  unit              Unit?               @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  unit_id           Int
  perspective       Perspective?        @relation(fields: [perspective_id], references: [id], onDelete: Cascade)
  perspective_id    Int
  stage             Stage?              @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  stage_id          Int
  font              Font?               @relation(fields: [font_id], references: [id], onDelete: Cascade)
  font_id           Int
  goal              Goal?               @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  goal_id           Int
  responsible       User?               @relation(fields: [responsible_id], references: [id], onDelete: Cascade)
  responsible_id    Int
  budget_code       Int
  mapp              Mapp?               @relation(fields: [mapp_id], references: [id], onDelete: Cascade)
  mapp_id           Int
  file              Bytes               @db.ByteA
  comments          String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Activity          Activity[]
  PendingActivity   PendingActivity[]
  PendingInitiative PendingInitiative[]

  @@map("initiatives")
}

model Activity {
  id              Int               @id @default(autoincrement())
  name            String
  initiative      Initiative?       @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  initiative_id   Int
  responsible     User?             @relation(fields: [responsible_id], references: [id], onDelete: Cascade)
  responsible_id  Int
  state           State?            @relation(fields: [state_id], references: [id], onDelete: Cascade)
  state_id        Int
  planning        Planning?         @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id     Int
  date_start      DateTime
  date_end        DateTime
  value           Decimal           @db.Decimal(4, 2)
  file            Bytes             @db.ByteA
  comments        String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  PendingActivity PendingActivity[]
  SentEmail       SentEmail[]

  @@map("activities")
}

model PendingInitiative {
  id             Int          @id @default(autoincrement())
  initiative     Initiative?  @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  initiative_id  Int
  name           String
  unit           Unit?        @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  unit_id        Int
  perspective    Perspective? @relation(fields: [perspective_id], references: [id], onDelete: Cascade)
  perspective_id Int
  stage          Stage?       @relation(fields: [stage_id], references: [id], onDelete: Cascade)
  stage_id       Int
  font           Font?        @relation(fields: [font_id], references: [id], onDelete: Cascade)
  font_id        Int
  goal           Goal?        @relation(fields: [goal_id], references: [id], onDelete: Cascade)
  goal_id        Int
  responsible    User?        @relation(fields: [responsible_id], references: [id], onDelete: Cascade)
  responsible_id Int
  planning       Planning?    @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id    Int
  budget_code    Int
  mapp           Mapp?        @relation(fields: [mapp_id], references: [id], onDelete: Cascade)
  mapp_id        Int
  code           String
  file           Bytes        @db.ByteA
  comments       String
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  @@map("pending_initiatives")
}

model PendingActivity {
  id             Int         @id @default(autoincrement())
  activity       Activity?   @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  activity_id    Int
  name           String
  initiative     Initiative? @relation(fields: [initiative_id], references: [id], onDelete: Cascade)
  initiative_id  Int
  responsible    User?       @relation(fields: [responsible_id], references: [id], onDelete: Cascade)
  responsible_id Int
  state          State?      @relation(fields: [state_id], references: [id], onDelete: Cascade)
  state_id       Int
  planning       Planning?   @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id    Int
  date_start     DateTime
  date_end       DateTime
  value          Decimal     @db.Decimal(4, 2)
  file           Bytes       @db.ByteA
  comments       String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@map("pending_activities")
}

model Mapp {
  id                Int                 @id @default(autoincrement())
  name              String
  planning          Planning?           @relation(fields: [planning_id], references: [id], onDelete: Cascade)
  planning_id       Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  Initiative        Initiative[]
  PendingInitiative PendingInitiative[]

  @@map("mapps")
}

model SentEmail {
  id              Int       @id @default(autoincrement())
  activity        Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  activity_id     Int
  already_delayed Boolean   @default(false)
  to_delayed      Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  @@map("sent_emails")
}
